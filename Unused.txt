// Use STB_IMAGE to load embedded PNG images in memory
// if you want to use stb_image for loading images
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

// Custom includes
#include "images.h" // embedded PNG bytes: unsigned char logo_p[]
                    // to create this file. Use imageConverter/convert.py

// use customStyle.h for custom styles
#include "customStyle.h" // custom style functions

// Add this inside of main() after ImGuiIO &io = ImGui::GetIO(); to apply custom styles
ApplyMyCustomStyle();

// Create OpenGL texture from embedded PNG data in memory.
// Use STB_IMAGE to load embedded PNG images in memory
static GLuint CreateTextureFromMemory(const unsigned char *data, size_t size)
{
    int w, h, channels;
    unsigned char *img_data = stbi_load_from_memory(data, (int)size, &w, &h, &channels, 4); // LOAD PNG from memory
    if (!img_data)
    {
        fprintf(stderr, "Failed to load PNG from memory\n");
        return 0;
    }

    GLuint tex;
    glGenTextures(1, &tex);
    glBindTexture(GL_TEXTURE_2D, tex);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, img_data);
    glBindTexture(GL_TEXTURE_2D, 0);

    stbi_image_free(img_data);

    return tex;
}

// Load embedded PNG image as texture before main rendering loop
GLuint background_texture = CreateTextureFromMemory(img_Backgroup, sizeof(img_Backgroup));
if (!background_texture)
    return 1;

// Unloading the texture after main rendering loop
glDeleteTextures(1, &background_texture);